{"version":3,"sources":["services/Axios.js","constants/index.js","services/API.js","components/Home.js","components/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["get","url","params","successCb","errorCb","axios","method","headers","baseURL","then","res","status","data","catch","error","getHistoricalData","sucessCb","Home","props","fetchHistoricalData","APIService","resp","console","log","err","this","className","Component","PageNotFound","App","href","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2UA+Ee,M,sCAxEXA,IAAM,SAACC,GAA0C,IAArCC,EAAoC,uDAA3B,GAAIC,EAAuB,uCAAZC,EAAY,uCAC5CC,IAAM,CACFC,OAAQ,MACRL,MACAC,SACAK,QAAS,CACL,OAAU,mBACV,8BAA+B,KAEnCC,QChBY,4BDiBbC,MAAK,SAACC,GACa,MAAfA,EAAIC,QACHR,EAAUO,EAAIE,SAEnBC,OAAM,SAACC,GACNV,EAAQU,QERL,M,sCANXC,kBAAoB,SAACC,EAAUZ,GAC3BC,EAAML,IDRgB,kBCQI,GAAIgB,EAAUZ,KCmBjCa,E,kDAvBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,oBAAsB,WAClBC,EAAWL,mBAAkB,SAACM,GAC1BC,QAAQC,IAAIF,MACb,SAACG,GACAF,QAAQC,IAAIC,OAZD,E,gEAKfC,KAAKN,wB,+BAYL,OAAO,yBAAKO,UAAU,QAAf,iB,GAlBIC,aCMJC,G,MAPM,WACjB,OAAO,yBAAKF,UAAU,iBACd,oCACA,kD,MCqBGG,MAnBf,WACE,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,eAChB,uBAAGA,UAAU,YAAYI,KAAK,KAA9B,oBAEF,6BAASJ,UAAU,gBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,UAAWL,MAGtB,4BAAQF,UAAU,kBCVJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAC,GACLQ,QAAQR,MAAMA,EAAMmC,c","file":"static/js/main.4a95afb5.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nimport {\r\n    BASE_API\r\n} from \"../constants/\";\r\n\r\nclass AxiosService {\r\n    get = (url, params = {}, successCb, errorCb) => {\r\n        axios({\r\n            method: 'get',\r\n            url,\r\n            params,\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            },\r\n            baseURL: BASE_API\r\n        }).then((res) => {\r\n            if(res.status === 200) {\r\n                successCb(res.data);\r\n            }\r\n        }).catch((error) => {\r\n            errorCb(error);\r\n        });\r\n    }\r\n\r\n    // TODO REMOVE METHODS\r\n    // post = (url, params, data, successCb, errorCb) => {\r\n    //     axios({\r\n    //         method: 'post',\r\n    //         url,\r\n    //         params,\r\n    //         data,\r\n    //         headers: {\r\n    //             \"Accept\": \"application/json\",\r\n    //             \"Access-Control-Allow-Origin\": \"*\"\r\n    //         }\r\n    //       }).then((res) => {\r\n    //         successCb(res);\r\n    //     }).catch((error) => {\r\n    //         errorCb(error);\r\n    //     });\r\n    // }\r\n\r\n    // put = (url, params, data, successCb, errorCb) => {\r\n    //     axios({\r\n    //         method: 'put',\r\n    //         url, \r\n    //         params,\r\n    //         data,\r\n    //         headers: {\r\n    //             \"Accept\": \"application/json\",\r\n    //             \"Access-Control-Allow-Origin\": \"*\"\r\n    //         }\r\n    //       }).then((res) => {\r\n    //         successCb(res.data);\r\n    //     }).catch((error) => {\r\n    //         errorCb(error);\r\n    //     });\r\n    // }\r\n\r\n    // delete = (url, params, data, successCb, errorCb) => {\r\n    //     axios({\r\n    //         method: 'delete',\r\n    //         url,\r\n    //         params,\r\n    //         data,\r\n    //         headers: {\r\n    //             \"Accept\": \"application/json\",\r\n    //             \"Access-Control-Allow-Origin\": \"*\"\r\n    //         }\r\n    //       }).then((res) => {\r\n    //         successCb( res.data);\r\n    //     }).catch((error) => {\r\n    //         errorCb(error);\r\n    //     });\r\n    // }\r\n};\r\n\r\nexport default new AxiosService();\r\n","export const BASE_API = \"http://kaboom.rksv.net/\";\r\nexport const HISTORICAL_API = \"/api/historical\";\r\n","import axios from \"./Axios\";\r\n\r\nimport {\r\n    HISTORICAL_API\r\n} from \"../constants/\";\r\n\r\nclass APIService {\r\n    \r\n    getHistoricalData = (sucessCb, errorCb) => {\r\n        axios.get(HISTORICAL_API, {}, sucessCb, errorCb);\r\n    }\r\n\r\n};\r\n\r\nexport default new APIService();\r\n","import React, { Component } from \"react\";\r\n\r\nimport APIService from \"../services/API\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchHistoricalData();\r\n    }\r\n\r\n    fetchHistoricalData = () => {\r\n        APIService.getHistoricalData((resp) => {\r\n            console.log(resp)\r\n        }, (err) => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(<div className=\"home\">\r\n            Home page\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport \"./PageNotFound.scss\";\r\n\r\nconst PageNotFound = () => {\r\n    return(<div className=\"no-page-found\">\r\n            <div>404</div>\r\n            <div>Page Not found</div>\r\n        </div>)\r\n};\r\n\r\nexport default PageNotFound;\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport PageNotFound from './components/PageNotFound';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app__header\">\n        <a className=\"app__link\" href=\"/\" > Stock Tracker </a>\n      </header>\n      <section className=\"app__section\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route component={PageNotFound} />\n        </Switch>\n      </section>\n      <footer className=\"app__footer\"></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}