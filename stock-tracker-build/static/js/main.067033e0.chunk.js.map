{"version":3,"sources":["components/Highchart.js","constants/index.js","components/ChartOption.js","components/DateOption.js","services/Axios.js","services/API.js","utils/index.js","components/HistoricChart.js","services/SocketService.js","components/LiveChart.js","components/Home.js","components/PageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["Highchart","props","highcharts","Highcharts","options","DATA_DISPLAY_TYPES","DATA_DURATION","ChartOption","className","type","onClick","clickHandler","active","duration","get","url","params","successCb","errorCb","axios","method","headers","then","res","status","data","catch","error","getHistoricalData","sucessCb","processStockDayData","str","items","split","ts","open","high","low","close","date","formatDate","mmyy","getMMYY","Date","month","getMonth","day","String","getDate","padStart","year","getFullYear","HistoricChart","fetchHistoricalData","APIService","resp","processData","err","console","resData","length","state","i","item","push","setState","getData","formattedData","map","id","obj","x","y","name","value","filter","_","uniqBy","getOptionConfig","title","text","series","xAxis","labels","formatter","this","yAxis","marker","enabled","radius","onChartOptionChange","onChartdurationChange","DateOption","Component","socket","io","onData","cb","on","f","LiveChart","configuration","connect","handler","onSub","setInterval","emit","hh","getHours","mm","getMinutes","getHHMM","VIEW","Home","toggleView","href","PageNotFound","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.067033e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\nconst Highchart = (props) => <div>\r\n  <HighchartsReact\r\n    highcharts={Highcharts}\r\n    options={props.options}\r\n  />\r\n</div>;\r\n\r\nexport default Highchart;\r\n","export const BASE_API = \"https://kaboom.rksv.net/\";\r\nexport const HISTORICAL_API = \"/api/historical\";\r\nexport const WS_URL = \"ws://kaboom.rksv.net/watch\";\r\n\r\nexport const DATA_DISPLAY_TYPES = {\r\n    OPEN: 'open',\r\n    HIGH: 'high',\r\n    LOW: 'low',\r\n    CLOSE: 'close'\r\n};\r\n\r\nexport const DATA_DURATION = {\r\n    ONE_YEAR: 1,\r\n    TWO_YEAR: 2,\r\n    FIVE_YEAR: 5,\r\n    ALL_YEAR: 100\r\n};\r\n\r\n","import React from \"react\";\r\nimport \"./ChartOption.scss\";\r\n\r\nimport {\r\n    DATA_DISPLAY_TYPES\r\n} from \"../constants/\";\r\n\r\nconst ChartOption = (props) => {\r\n    return (<div className=\"btn-group \">\r\n        <button type=\"button\" onClick={ () => props.clickHandler(DATA_DISPLAY_TYPES.OPEN) } \r\n            className={`btn btn-secondary first ${props.active === DATA_DISPLAY_TYPES.OPEN ? 'active' : ''} `}>Open</button>\r\n        <button type=\"button\" onClick={ () => props.clickHandler(DATA_DISPLAY_TYPES.HIGH) }  \r\n            className={`btn btn-secondary ${props.active === DATA_DISPLAY_TYPES.HIGH ? 'active' : ''} `}>High</button>\r\n        <button type=\"button\" onClick={ () => props.clickHandler(DATA_DISPLAY_TYPES.LOW) }  \r\n            className={`btn btn-secondary ${props.active === DATA_DISPLAY_TYPES.LOW ? 'active' : ''} `}>Low</button>\r\n        <button type=\"button\" onClick={ () => props.clickHandler(DATA_DISPLAY_TYPES.CLOSE) }  \r\n            className={`btn btn-secondary last ${props.active === DATA_DISPLAY_TYPES.CLOSE ? 'active' : ''} `} >Close</button>\r\n    </div>)\r\n};\r\n\r\nexport default ChartOption;\r\n","import React from \"react\";\r\nimport \"./ChartOption.scss\";\r\n\r\nimport {\r\n    DATA_DURATION\r\n} from \"../constants/\";\r\n\r\nconst ChartOption = (props) => {\r\n    return (<div className=\"btn-group date-group\">\r\n        <button type=\"button\" onClick={ () => props.clickHandler(DATA_DURATION.ONE_YEAR) } \r\n            className={`btn btn-secondary first ${props.duration === DATA_DURATION.ONE_YEAR ? 'active' : ''} `}>1Y</button>\r\n        <button type=\"button\" onClick={ () => props.clickHandler(DATA_DURATION.TWO_YEAR) }  \r\n            className={`btn btn-secondary ${props.duration === DATA_DURATION.TWO_YEAR ? 'active' : ''} `}>2Y</button>\r\n        <button type=\"button\" onClick={ () => props.clickHandler(DATA_DURATION.FIVE_YEAR) }  \r\n            className={`btn btn-secondary ${props.duration === DATA_DURATION.FIVE_YEAR ? 'active' : ''} `}>5Y</button>\r\n        <button type=\"button\" onClick={ () => props.clickHandler(DATA_DURATION.ALL_YEAR) }  \r\n            className={`btn btn-secondary last ${props.duration === DATA_DURATION.ALL_YEAR ? 'active' : ''} `}>ALL</button>\r\n    </div>)\r\n};\r\n\r\nexport default ChartOption;\r\n","import axios from \"axios\";\r\n\r\nimport {\r\n    BASE_API\r\n} from \"../constants/\";\r\n\r\nclass AxiosService {\r\n    get = (url, params = {}, successCb, errorCb) => {\r\n        axios({\r\n            method: 'get',\r\n            url,\r\n            params,\r\n            headers: {\r\n                \"Accept\": \"application/json\",\r\n                \"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then((res) => {\r\n            if(res.status === 200) {\r\n                successCb(res.data);\r\n            }\r\n        }).catch((error) => {\r\n            errorCb(error);\r\n        });\r\n    }\r\n\r\n    // TODO REMOVE METHODS\r\n    // post = (url, params, data, successCb, errorCb) => {\r\n    //     axios({\r\n    //         method: 'post',\r\n    //         url,\r\n    //         params,\r\n    //         data,\r\n    //         headers: {\r\n    //             \"Accept\": \"application/json\",\r\n    //             \"Access-Control-Allow-Origin\": \"*\"\r\n    //         }\r\n    //       }).then((res) => {\r\n    //         successCb(res);\r\n    //     }).catch((error) => {\r\n    //         errorCb(error);\r\n    //     });\r\n    // }\r\n\r\n    // put = (url, params, data, successCb, errorCb) => {\r\n    //     axios({\r\n    //         method: 'put',\r\n    //         url, \r\n    //         params,\r\n    //         data,\r\n    //         headers: {\r\n    //             \"Accept\": \"application/json\",\r\n    //             \"Access-Control-Allow-Origin\": \"*\"\r\n    //         }\r\n    //       }).then((res) => {\r\n    //         successCb(res.data);\r\n    //     }).catch((error) => {\r\n    //         errorCb(error);\r\n    //     });\r\n    // }\r\n\r\n    // delete = (url, params, data, successCb, errorCb) => {\r\n    //     axios({\r\n    //         method: 'delete',\r\n    //         url,\r\n    //         params,\r\n    //         data,\r\n    //         headers: {\r\n    //             \"Accept\": \"application/json\",\r\n    //             \"Access-Control-Allow-Origin\": \"*\"\r\n    //         }\r\n    //       }).then((res) => {\r\n    //         successCb( res.data);\r\n    //     }).catch((error) => {\r\n    //         errorCb(error);\r\n    //     });\r\n    // }\r\n};\r\n\r\nexport default new AxiosService();\r\n","import axios from \"./Axios\";\r\n\r\nimport {\r\n    HISTORICAL_API\r\n} from \"../constants/\";\r\n\r\nclass APIService {\r\n    \r\n    getHistoricalData = (sucessCb, errorCb) => {\r\n        axios.get(HISTORICAL_API, {}, sucessCb, errorCb);\r\n    }\r\n\r\n};\r\n\r\nexport default new APIService();\r\n","export const processStockDayData = (str) => {\r\n    const items = str.split(',')\r\n    \r\n    return {\r\n        ts: items[0] * 1,\r\n        open: items[1],\r\n        high: items[2],\r\n        low: items[3],\r\n        close: items[4],\r\n        date: formatDate(items[0]),\r\n        mmyy: getMMYY(items[0])\r\n    }\r\n};\r\n\r\nexport const formatDate = (ts) => {\r\n    let date = new Date(ts * 1);\r\n    let month = date.getMonth() + 1;\r\n    let day = String(date.getDate()).padStart(2, '0');\r\n    let year = date.getFullYear();\r\n    return `${day}/${month}/${year}`;\r\n};\r\n\r\nexport const getMMYY = (ts) => {\r\n    let date = new Date(ts * 1);\r\n    let month = date.getMonth() + 1;\r\n    let year = date.getFullYear();\r\n    return `${month}${year}`;\r\n};\r\n\r\nexport const getHHMM = (ts) => {\r\n    let date = new Date(ts * 1);\r\n    let hh = date.getHours();\r\n    let mm = date.getMinutes();\r\n    return `${hh}:${mm}`;\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\nimport _ from \"lodash\";\r\n\r\nimport \"../scss/_common.scss\";\r\n\r\nimport Highchart from \"./Highchart\";\r\nimport ChartOption from \"./ChartOption\";\r\nimport DateOption from \"./DateOption\";\r\n\r\nimport APIService from \"../services/API\";\r\n\r\nimport {\r\n    DATA_DISPLAY_TYPES,\r\n    DATA_DURATION\r\n} from \"../constants/\";\r\n\r\nimport {\r\n    processStockDayData,\r\n    formatDate\r\n} from \"../utils\";\r\n\r\nclass HistoricChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            active: DATA_DISPLAY_TYPES.OPEN,\r\n            duration: DATA_DURATION.FIVE_YEAR\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchHistoricalData();\r\n    }\r\n\r\n    fetchHistoricalData = () => {\r\n        APIService.getHistoricalData((resp) => {\r\n            this.processData(resp)\r\n        }, err => console.error(err))\r\n    }\r\n\r\n    processData = (resData) => {\r\n        let length = resData.length;\r\n        let { data } = this.state;\r\n        data = data || [];\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            let item = processStockDayData(resData[i]);\r\n            data.push(item);\r\n        }\r\n\r\n        this.setState({\r\n            data\r\n        })\r\n    }\r\n\r\n    getData = () => {\r\n        let { active, data, duration } = this.state;\r\n        let formattedData = [];\r\n        formattedData = data.map((item, id) => {\r\n            let currYear = new Date().getFullYear();\r\n            let itemYear = new Date(item.ts * 1).getFullYear()\r\n            let obj = null;\r\n            if ((currYear - itemYear) <= duration) {\r\n                obj = {\r\n                    id,\r\n                    x: new Date(item.ts * 1),\r\n                    y: item[active] * 1,\r\n                    name: item.date,\r\n                    value: item.date,\r\n                    mmyy: item.mmyy\r\n                }\r\n            };\r\n            return obj;\r\n        });\r\n\r\n        formattedData = formattedData.filter(item => item);\r\n\r\n        if (duration === DATA_DURATION.ALL_YEAR) {\r\n            formattedData = _.uniqBy(formattedData, (item) => item.mmyy);\r\n        }\r\n\r\n        return formattedData;\r\n    }\r\n\r\n    getOptionConfig = () => {\r\n        return {\r\n            title: {\r\n                text: 'Historic data'\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'line',\r\n                    data: this.getData()\r\n                }\r\n            ],\r\n            xAxis: [{\r\n                title: {\r\n                    text: 'Date'\r\n                },\r\n                labels: {\r\n                    formatter: function () {\r\n                        return formatDate(this.value * 1);\r\n                    }\r\n                }\r\n            }],\r\n            yAxis: [{\r\n                title: {\r\n                    text: 'Price'\r\n                }\r\n            }],\r\n            marker: {\r\n                enabled: true,\r\n                radius: 3\r\n            }\r\n        };\r\n    }\r\n\r\n    onChartOptionChange = (active) => {\r\n        this.setState({\r\n            active\r\n        });\r\n    }\r\n\r\n    onChartdurationChange = (duration) => {\r\n        this.setState({\r\n            duration\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.data.length === 0) {\r\n            return <div className=\"loading-text\">Loading...</div>;\r\n        }\r\n\r\n        const options = this.getOptionConfig();\r\n\r\n        return (<div className=\"historic-data\">\r\n            <div className=\"chart-option\">\r\n                <ChartOption active={this.state.active} clickHandler={this.onChartOptionChange} />\r\n                <DateOption duration={this.state.duration} clickHandler={this.onChartdurationChange} />\r\n            </div>\r\n            <div>\r\n                {\r\n\r\n                    options.series[0].data.length > 0\r\n                        ?\r\n                        <Highchart options={options} />\r\n                        :\r\n                        <div className=\"no-data\">No data found.</div>\r\n                }\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default HistoricChart;\r\n","import io from 'socket.io-client';\r\nimport {\r\n    WS_URL\r\n} from \"../constants/\"\r\n\r\nconst socket = io(WS_URL);\r\n\r\n\r\nexport const connect = () => socket.connect();\r\n\r\nexport const event = (cb) => socket.on('event', cb);\r\n\r\nexport const onError = (cb) => socket.on('error', (err) => cb(err));\r\n\r\nexport const onData = (cb) => socket.on('data', (data, f) => cb(data, f));\r\n\r\nexport const onPing = (cb) => socket.on('ping', (data) => cb(data));\r\n\r\nexport const emitPing = (cb) => socket.emit('ping', {});\r\n\r\nexport const onSub = (cb) => socket.on('sub', (data) => cb(data));\r\n\r\nexport const emitSub = () => socket.emit('sub', {\r\n    state: !0\r\n})\r\n\r\nexport const emitUnSub = () => socket.emit('unsub', {\r\n    state: !1\r\n})\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"../scss/_common.scss\";\r\n\r\nimport Highchart from \"./Highchart\";\r\nimport ChartOption from \"./ChartOption\";\r\n\r\nimport {\r\n    processStockDayData,\r\n    getHHMM,\r\n} from \"../utils\";\r\n\r\nimport {\r\n    DATA_DISPLAY_TYPES\r\n} from \"../constants/\";\r\n\r\nimport {\r\n    connect,\r\n    onPing,\r\n    onError,\r\n    emitPing,\r\n    emitSub,\r\n    onData,\r\n    onSub,\r\n    emitUnSub\r\n} from \"../services/SocketService\";\r\n\r\nclass LiveChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n            active: DATA_DISPLAY_TYPES.OPEN\r\n        };\r\n\r\n        this.configuration();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        emitUnSub();\r\n    }\r\n\r\n    configuration = () => {\r\n        connect();\r\n        onData(this.handler);\r\n        onError(this.handler)\r\n        onSub(this.handler);\r\n        setInterval(() => {\r\n            emitSub();\r\n            onData(this.handler);\r\n        }, 10000)\r\n    }\r\n\r\n    handler = (data, cb) => {\r\n        if(cb) {\r\n            cb(1);\r\n        }\r\n        if(data && typeof data === \"string\") {\r\n            this.processData([data])\r\n        }\r\n    }\r\n\r\n    processData = (resData) => {\r\n        let length = resData.length;\r\n        let { data } = this.state;\r\n        data = data || [];\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            let item = processStockDayData(resData[i]);\r\n            data.push(item);\r\n        }\r\n\r\n        this.setState({\r\n            data\r\n        })\r\n    }\r\n\r\n    getData = () => {\r\n        let { active } = this.state;\r\n        let data = this.state.data.map((item, id) => {\r\n            return {\r\n                id,\r\n                x: new Date(item.ts * 1),\r\n                y: item[active] * 1,\r\n                name: new Date(item.ts * 1)\r\n\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n\r\n    onChartOptionChange = (active) => {\r\n        this.setState({\r\n            active\r\n        });\r\n    }\r\n\r\n    getOptionConfig = () => {\r\n        return {\r\n            title: {\r\n                text: 'Live data'\r\n            },\r\n            series: [\r\n                {\r\n                    type: 'line',\r\n                    data: this.getData()\r\n                }\r\n            ],\r\n            xAxis: [{\r\n                title: {\r\n                    text: 'Date'\r\n                },\r\n                labels: {\r\n                    formatter: function () {\r\n                        return getHHMM(this.value * 1);\r\n                    }\r\n                }\r\n            }],\r\n            yAxis: [{\r\n                title: {\r\n                    text: 'Price'\r\n                }\r\n            }],\r\n            marker: {\r\n                enabled: true,\r\n                radius: 3\r\n            }\r\n        };\r\n    }\r\n\r\n    onChartdurationChange = (duration) => {\r\n        this.setState({\r\n            duration\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.data.length === 0) {\r\n            return <div  className=\"loading-text\">Loading...</div>;\r\n        }\r\n\r\n        const options = this.getOptionConfig();\r\n\r\n        return (<div className=\"historic-data\">\r\n            <div className=\"chart-option\">\r\n                <ChartOption active={this.state.active} clickHandler={this.onChartOptionChange} />\r\n            </div>\r\n            <div>\r\n                <Highchart options={options} />\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default LiveChart;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Home.scss\";\r\n\r\nimport HistoricChart from \"./HistoricChart\";\r\nimport LiveChart from \"./LiveChart\";\r\n\r\nconst VIEW = {\r\n    HISTORIC: 1,\r\n    LIVE: 2\r\n};\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            active: VIEW.HISTORIC\r\n        };\r\n    }\r\n\r\n    toggleView = (active) => {\r\n        this.setState({\r\n            active\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let { active } = this.state;\r\n\r\n        return (<div className=\"home\">\r\n            <ul className=\"nav\">\r\n                <li className={`nav-item ${active === VIEW.HISTORIC ? 'active' : ''}`} onClick={() => this.toggleView(VIEW.HISTORIC)}>\r\n                    <a className=\"nav-link\" href=\"/\">Historic Chart</a>\r\n                </li>\r\n                <li className={`nav-item ${active === VIEW.LIVE ? 'active' : ''}`} onClick={() => this.toggleView(VIEW.LIVE)}>\r\n                    <a className=\"nav-link\" href=\"/\">Live Chart</a>\r\n                </li>\r\n            </ul>\r\n            {\r\n                active === VIEW.HISTORIC\r\n                    ?\r\n                    <HistoricChart />\r\n                    :\r\n                    null\r\n            }\r\n            {\r\n                active === VIEW.LIVE\r\n                    ?\r\n                    <LiveChart />\r\n                    :\r\n                    null\r\n            }\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport \"./PageNotFound.scss\";\r\n\r\nconst PageNotFound = () => {\r\n    return(<div className=\"no-page-found\">\r\n            <div>404</div>\r\n            <div>Page Not found</div>\r\n        </div>)\r\n};\r\n\r\nexport default PageNotFound;\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport PageNotFound from './components/PageNotFound';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"app__header\">\n        <a className=\"app__link\" href=\"/\" ><h1>Stock Tracker</h1></a>\n      </header>\n      <section className=\"app__section\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route component={PageNotFound} />\n        </Switch>\n      </section>\n      <footer className=\"app__footer\"></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}